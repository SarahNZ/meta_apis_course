TECHNICAL PLAN

# PROJECT & APP SET-UP ✅
- Create a project directory called “LittleLemon” ✅
- Inside the project directory, activate the virtual environment. E.g. `pipenv shell`  and install the pipenv dependencies `pipenv install` ✅
- cd to the new project directory and install Django. E.g. pipenv install django. Check Django is installed using pip show django ✅
- Activate the virtual environment (using pipenv shell) ✅
- Create Django project (django-admin startproject LittleLemon) ✅
- Create Django API app, LittleLemonAPI (python manage.py startapp LittleLemonAPI) ✅
- Add the API app to the list of installed apps in settings.py ✅
- Add the route to the API app in the project-levels urls.py and comment out ✅
- Create empty urls.py and serializers.py files ✅
- Install DRF (using pipenv install djangorestframework) and add 'rest_framework' to the list of installed apps ✅
- Run migrations (using python manage.py makemigrations and migrate) to craete the db.sqlite3 db ✅
- Run the server and check you can browse to thelocalhost 8000 port -> Success rocket page should be displayed ✅

# CREATE SUPERUSER AND CHECK ADMIN PORTAL WORKING ✅
- Create superuser (python manage.py createsuperuser) ✅
    - sarah, sarah@littlelemon.com, dogcatcamelpig
- Run server (python manage.py runserver) ✅
- Browse to admin portal (http://localhost:8000/admin) ✅
- Log in as superuser ✅

# IMPLEMENT DJOSER'S USER AUTHENTICATION ✅
- In virtual env/correct project dir, install Djoser (pipenv install djoser) ✅
- Add Djoser to installed apps list in settings.py ✅
- Add Djoser section/variable to settings.py {'USER_ID_FIELDS': 'username','LOGIN_FIELD': 'email',}✅
- In the project-level urls.py add Djoser auth endpoints [path('auth/', include('djoser.urls')),path('auth/', include('djoser.urls.authtoken')),] ✅
- Run server, then browse to the Djoser auth root endpoint. E.g. http://localhost:8000/auth/ to make sure it's working
- View the list of users at /auth/users ✅
See endpoints_lst for other relevant Djoser user authentication endpoints

# IMPLEMENT DRF'S TOKEN AUTHENTICATION - in progress
- Note: Decided to use DRF's simple token authentication system rather than JWT (which is better for bigger projects)
- Add rest_framework.authtoken to INSTALLED_APPS ✅
- Run migrations (so authtoken_token table gets created) ✅
- Configure DRF to use token authentication by default. I.e. ✅
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
        ],
    }
- Run server, and test that superuser can create a login token via BrowsableAPI (/auth/token/login/)
"auth_token": "3a8dffd5dfb0e37042bce82b0266fcdff786d96a" ✅

CREATE TEST USERS AND GROUPS
- Create group - Manager ✅
- Create group - Delivery Crew ✅
- Create users and assign to relevant group ✅
    (Username is first name in lower case, password is first name plus pass123)
    - Manager: Marcus ✅
    - Delivery Crew: Kaitlyn, Eva ✅
    - Customers: Ren, Sage, Aroha (no group) ✅
- Add test users and their passwords to test_data.txt ✅

# ADD FUNCTIONALITY ONE FEATURE AT AT TIME
    - For all features consider:
        - requirements & test cases
        - users & security (limit permissions to minimum required, block unauthenticated and unauthorized users and unncessary HTTP methods as applicable)
        - models.py (then run the migrations, also register each model to the admin app)
        - views.py 
        - serializers (including form validation)
        - map routes in urls.py (app-level)
        - testing (manual & automated)
    - features:
        - 

# IMPLEMENT THROTTLING
To 5 calls per minute

# IMPLEMENT FILTERING, SEARCHING AND ORDERING

# IMPLEMENT PAGINATION

# EXECUTE TEST CASES TO ENSURE BUSINESS REQUIREMENTS HAVE BEEN MET  
Ref: See test plan and status in Google sheet: https://docs.google.com/spreadsheets/d/1QeKFUfuDS9zleyRI7xJ-eHNPRXbaPjJ0O8urqq6ghu4/edit?gid=0#gid=0
- And add extra test cases, as needed for testing authorization, validation and negative test cases/bad input

# SUBMIT ASSIGNMENT

# (EXTRA): CREATE AUTOMATED API TESTS USING TOOL LIKE DJANGO, POSTMAN OR RESTASSURE



