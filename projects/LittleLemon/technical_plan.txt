TECHNICAL PLAN ✅ ❌

# PROJECT & APP SET-UP ✅
- Create a project directory called “LittleLemon” ✅
- Inside the project directory, activate the virtual environment. E.g. `pipenv shell`  and install the pipenv dependencies `pipenv install` ✅
- cd to the new project directory and install Django. E.g. pipenv install django. Check Django is installed using pip show django ✅
- Activate the virtual environment (using pipenv shell) ✅
- Create Django project (django-admin startproject LittleLemon) ✅
- Create Django API app, LittleLemonAPI (python manage.py startapp LittleLemonAPI) ✅
- Add the API app to the list of installed apps in settings.py ✅
- Add the route to the API app in the project-levels urls.py and comment out ✅
- Create empty urls.py and serializers.py files ✅
- Install DRF (using pipenv install djangorestframework) and add 'rest_framework' to the list of installed apps ✅
- Run migrations (using python manage.py makemigrations and migrate) to create the db.sqlite3 db ✅
- Run the server and check you can browse to thelocalhost 8000 port -> Success rocket page should be displayed ✅

# CREATE SUPERUSER AND CHECK ADMIN PORTAL WORKING ✅
- Create superuser (python manage.py createsuperuser) ✅
    - sarah, sarah@littlelemon.com, dogcatcamelpig
- Run server (python manage.py runserver) ✅
- Browse to admin portal (http://localhost:8000/admin) ✅
- Log in as superuser ✅

# IMPLEMENT DJOSER'S USER AUTHENTICATION ✅
- In virtual env/correct project dir, install Djoser (pipenv install djoser) ✅
- Add Djoser to installed apps list in settings.py ✅
- Add Djoser section/variable to settings.py {'USER_ID_FIELDS': 'username','LOGIN_FIELD': 'email',}✅
- In the project-level urls.py add Djoser auth endpoints [path('auth/', include('djoser.urls')),path('auth/', include('djoser.urls.authtoken')),] ✅
- Run server, then browse to the Djoser auth root endpoint. E.g. http://localhost:8000/auth/ to make sure it's working
- View the list of users at /auth/users ✅
See endpoints_lst for other relevant Djoser user authentication endpoints

# IMPLEMENT DRF'S TOKEN AUTHENTICATION - in progress
- Note: Decided to use DRF's simple token authentication system rather than JWT (which is better for bigger projects)
- Add rest_framework.authtoken to INSTALLED_APPS ✅
- Run migrations (so authtoken_token table gets created) ✅
- Configure DRF to use token authentication by default. I.e. ✅
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
        ],
    }
- Run server, and test that superuser can create a login token via BrowsableAPI (/auth/token/login/)
"auth_token": "3a8dffd5dfb0e37042bce82b0266fcdff786d96a" ✅

# INSTALL PYTEST AND PYTEST-DJANGO ✅
- Install pytest (pipenv install pytest)
- Install pytest-django (pipenv install pytest-django)
- Create a new directory "tests" one level down from the top-level project directory
- Create a "pytest.ini" file containing
    [pytest]
    DJANGO_SETTINGS_MODULE = LittleLemon.settings  
    python_files = tests.py test_*.py *_tests.py
- Create a "base_test_utils.py"

CREATE TEST USERS AND GROUPS ✅
- Create group - Manager ✅
- Create group - Delivery Crew ✅
- Create users and assign to relevant group ✅
    (Username is first name in lower case, password is first name plus pass123)
    - Manager: Marcus ✅ (Make Staff/Admin, so they can add other users to the Manager group)
    - Delivery Crew: Kaitlyn, Eva ✅
    - Customers: Ren, Sage, Aroha (no group) ✅
- Add test users and their passwords to test_data.txt ✅

# ADD FUNCTIONALITY ONE FEATURE AT AT TIME
    - For all features consider:
        - requirements & test cases
        - users & security (limit permissions to minimum required, block unauthenticated and unauthorized users and unncessary HTTP methods as applicable)
        - models.py (then run the migrations, also register each model to the admin app)
        - views.py (only support HTTP methods that are required, return relevant status code)
        - serializers (including form validation)
        - map routes in urls.py (app-level)
        - testing (manual & automated)

    - Features:

    * USER MANAGEMENT ✅
        - Customers can register. Create new users with name, email and password ✅
            POST /auth/users (no auth or role required)
            - valid input ✅
            - invalid input (blank/bad username, password, both) ✅
                -> Email is optional, but if provided, must be valid
                -> Can't create duplicate usernames
                -> Username and password fields must not be blank. Email can be blank
                -> Customer can't add email later using PATCH (Get 401 Unauthorized error code)
        - User can log in with valid username and password and get access token ✅
            I.e. POST /token/login/
        - Managers can log in and get access token ✅
        - Superuser can view all users ✅
            POST /auth/users/ and valid superuser token
        - Manager who isn't staff can't view list of all users ✅
        - Manager (who is staff/admin) can view a list of all users ✅
            GET /api/users with manager token
        - Check unauthenticted users ✅, delivery crew users ✅ and authenticated customers ✅ can't view a list of users
        - Display the current user ✅
            GET /auth/users/me (anyone with a valid user token)

    * USER GROUP MANAGEMENT 

        * MANAGER GROUP ✅
        - Managers can view a list of all the users in the Manager group ✅
            GET /api/groups/manager/users
        - Check unauthenticated and non-Manager users (Customers, Delivery Crew) can't view a list of all users in the manager group ✅
        - Manager can add users to the Manager group ✅
            POST /api/groups/manager/users with manager staff token (assigns user in the form payload e.g. {"username": "eva"} to the manager group)
                and return 201 - Created code ✅
            - Check valid/invalid/blank input ✅
        - Assume Managers can't edit users (I.e. Can't update user information) - Would check in real world
        - Managers can delete users from the Manager group ✅
            DELETE /api/groups/manager/users with manager staff token (removes user provided in the form payload e.g. {"username": "eva"} from the manager group) - return 200 - Success,
            or 404 Not found if user did not exist
        - Users that aren't managers (or unauthenticated users) can't add ✅ or remove users from the Managers group ✅
        
        * DELIVERY CREW GROUP
            - Manager can view a list of all the users in the Delivery Crew group ✅
            GET /api/groups/delivery-crew/users
        - Check unauthenticated and non-Manager users (Customers, Delivery Crew) can't view a list of all users in the DC group ✅
        - Manager can add users to the DC group - up to here :)
            POST /api/groups/delivery-crew/users with manager token assigns user in the payload to the manager group
                and return 201 - Created code
            - Check valid/invalid/blank input
        - Managers can delete users from the DC group
            DELETE /api/groups/delivery-crew/users/{userId} - return 200 - Success,
            or 404 Not found if user did not exist
        - Users that aren't managers (or unauthenticated users) can't add or remove users from the Delivery Crew group

    * ALL AUTHENTICATED USERS CAN VIEW ALL MENU ITEMS
        - Customers, delivery crew and managers can view all menu items
            GET only /api/menu-items (return 200 ok code)
            I.e. Check auth/not auth, item exists/does not (correct status codes)
        - Customers and delivery crew can't do other HTTP methods when viewing all menu items
            POST, PUT, PATCH, DELETE /api/menu-items  (Deny access and return 403 - Unauthorised status code)
        - Customers can filter/view menu items by category
            I.e. Check auth/not auth, item exists/does not (correct status codes)
        - Customers can search for menu items
            I.e. Check auth/not auth, item exists/does not (correct status codes)
        - Customers can sort menu items by price
            - valid/invalid search criteria
        - Customers can paginate menu items
        - Customers, delivery crew and managers can view a single menu item  
            GET /api/menu-items/{menuItem}
        - Customers and delivery crew can't update (partially or fully) or delete a menu item
            POST, PUT, PATCH, DELETE /api/menu-items/{menuItem}  (Deny access and return 403 - Unauthorised status code)
    
    * CATEGORY MANAGEMENT
        - Managers can add categories
        - Anonymous users and non-Manager users can't add categories
        - Customers can view all categories
            - anonymous users can't

    * MENU ITEM MANAGEMENT  
        - Managers can add, edit and remove menu items. I.e. 
            - Create a new menu item POST /api/menu-items/ (and return 201 - Created code)
            - Update a single menu item PUT, PATCH /api/menu-items/{menuItem}
                - Requirements say "Managers can update the item of the day". 
                Do we need to be able to label the item of the day? How do we identify the item of the day? Check this
            - Delete a single menu item DELETE /api/menu-items/{menuItem}
                -> Then try to view it
            - Check valid/invalid/blank input and when item does not exist
        - Users that aren't managers can't add, edit or remove menu items
    
    * CART MANAGEMENT
        - Customers can add menu items to their cart
            POST /api/users/{userId}/cart/menu-items or
            POST /api/cart/menu-items - adds the menu items to the cart. 
                Sets the authenticated user as the user id for these cart items 
            - Check valid/invalid & auth/not auth actions
        - Customers can view the menu items in their cart  
            GET /api/cart/menu-items for the current user token  
        - Customers can't view other customer's cart (menu items)
        - Customers can empty their cart at any time
            DELETE /api/users/{userId}/cart
            or 
            DELETE /api/cart/menu-items - deletes all menu items created by the current user token
            - Valid, return error if cart already empty
        - Customers can't empty the carts of other customers
        - One customer should be able to have only one cart at a time
            - Check valid action & try to create more than one cart
            - Check customer can't edit another customer's cart
        - One cart can have 1 or many items

    * ORDER MANAGEMENT

        * CUSTOMER
            - Customers can place one or more orders
                POST /api/orders - Creates a new order item for the current user,
                    gets current cart items from the cart endpoints and adds those items to the 
                    items in the order items table. Then deletes all items from the cart for this user
                - Check valid/invalid & auth/not auth actions
            - Assume delivery crew can place orders - Would check in real world
            - Check unauthenticated users can't place an order
            -Customers can view a list of their orders (at any stage and see the status and total price)
                I.e. GET /api/orders with Customer token - returns all orders with order items created by the user
            - Check unathorized users can't see a list of customers' order, and customer can't see other customers orders
            - Customer can view details of a single order 
                GET /api/orders/{orderId} - displays all items for this order id. 
                - displays an error if the order id doesn't belong to the current user 
            - Customer can update their order
                PUT, PATCH /api/orders/{orderId}
                - but not update delivery person or status
            - Assume customer can't delete their order - Would check if real world
        
        * MANAGER
            - Manager can view all orders for all users
                GET /api/orders if have manager token
            - Manager can view/filter orders for a single user
            - Manager can view a single order
                GET /api/orders/{orderId}
            - Manager can assign order to a delivery person and/or update order status to 0 or 1
                Note: status = 0 means order is out for delivery
                If a delivery person is assigned to this order, and status = 1 means order has been delivered
                PUT, PATCH /api/orders/{orderId} if have manager token)
                - Check that Manager can't assign order to customer or invalid delivery person/not exists
            - Manager can delete an order  
                DELETE /api/orders/{orderId}
            - Check that unauthenticated users and non-Manager users (delivery crew/customers can't orders, including their own and other users)
            - User with delivery crew role can change order status from pending to delivered.
                - Check Customer or unauthorized person can't change the status of their order
            - Manager can filter orders by status (to see which have been delivered, and which have not been delivered yet)
                I.e. /api/orders?status=delivered or /api/orders?status=pending with manager token. 
                - Check auth/unauth & group valid/invalid
            - Assume Manager can also mark orders as delivered (check this assumption)

        * DELIVERY CREW
            - Delivery crew can view all orders assigned to the delivery crew
                I.e. GET /api/orders with delivery person token
            - Check that delivery crew can't view orders that aren't assigned to the DC
            - DC can view a single order assigned to the delivery crew
                GET /api/orders/{orderId}
            - Check that DC can't view a single order that's not assigned to the DC
            - DC can update the status of an order as delivered (1). I.e.
                PATCH /api/orders/{orderId}
            - DC can't update any other fields of an order
            - DC can't update the status of an order not assigned to the DC

# IMPLEMENT THROTTLING
- For authenticated and unauthenticated users
To 5 calls per minute
- Check all relevant endpoint calls allow 5 calls per minute, then no more, and then allow more calls after a minute

# IMPLEMENT PAGINATION
- Make sure users can paginate relevant endpoints

# EXECUTE TEST CASES TO ENSURE BUSINESS REQUIREMENTS HAVE BEEN MET  
See test_little_lemon_api Google sheet
Link: https://docs.google.com/spreadsheets/d/1QeKFUfuDS9zleyRI7xJ-eHNPRXbaPjJ0O8urqq6ghu4/edit?gid=740715841#gid=740715841
- And add extra test cases, as needed for testing authorization, validation and negative test cases/bad input

# SUBMIT ASSIGNMENT

# (EXTRA): CREATE AUTOMATED API TESTS USING TOOL LIKE DJANGO, POSTMAN OR RESTASSURE



